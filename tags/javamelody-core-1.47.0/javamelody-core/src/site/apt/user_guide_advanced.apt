	-----
	Description et documentation de Java Melody : monitoring d'applications Java EE
	-----
	Auteur : Emeric Vernat (evernat@free.fr)
	-----
	2009-01-01
	-----

~~ http://maven.apache.org/doxia/references/apt-format.html

Documentation avancée de Java Melody

	({{{./user_guide_advanced_en.html} English }}, {{{./user_guide.html} Guide d'utilisation }})

* Mise en oeuvre de JavaMelody dans un fichier ear au lieu d'un fichier war

	(Ecrit à partir d'une contribution de 'dhartford')

	Si vous déployez votre application avec un fichier war ou avec un répertoire équivalent,
	suivez uniquement le {{{./user_guide.html} guide d'utilisation}}.
	
	Si vous déployez votre application avec un fichier ear, probablement parce que vous utilisez des EJBs,
	ce chapitre vous guidera pour mettre en oeuvre JavaMelody dans votre ear.
	Note: si vous avez des problèmes de class loading avec un ear, cela peut aider d'utiliser
	un unique war à la place d'un ear (et avec JavaEE 6, il est même possible d'utiliser des EJBs
	dans un unique war).
	
	** 1. Fichiers jar

	Copier les fichiers <<<javamelody.jar>>> et <<<jrobin-x.jar>>>, situés à la racine du fichier javamelody.zip fourni,
	vers le répertoire lib de l'ear de l'application à monitorer (le répertoire lib est "requis" par la spécification JavaEE 5).
	Si vous voulez avoir des rapports en format PDF ou des rapports hebdomadaires par mail, copier aussi le fichier <<<itext-x.jar>>> au même endroit.
	
	Pour déclarer les fichiers jar dans l'ear, modifier le fichier <<</META-INF/application.xml>>> dans l'ear comme ceci :
	
+-------------------------------+
	<application version="5"
		xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/application_5.xsd">
		....
		<module>
			<java>lib/javamelody.jar</java>
		</module>
		<module>
			<java>lib/jrobin-x.jar</java>
		</module>
		<module>
			<java>lib/itext-x.jar</java>
		</module>
		<module>
			<web>
				<web-uri>mywebapp.war</web-uri>
				<context-root>mycontext</context-root>
			</web>
		</module>
		....
	</application>
+-------------------------------+

	Si vous utilisez Maven, il vous est possible d'utiliser le plugin mavean ear et le flag <<<includeInApplicationXml>>> pour produire ce fichier.
	
	** 2. Fichier <<<web.xml>>>

	Il est nécessaire d'avoir le war d'une unique webapp dans votre ear.
	Si vous n'avez pas de war, créez le avec un simple fichier <<<web.xml>>> dans le répertoire WEB-INF du war.
	Et modifiez le fichier <<<web.xml>>> dans ce war comme écrit dans le chapitre "Fichier <<<web.xml>>>" du {{{./user_guide.html} guide d'utilisation}}.
	
	** 3. Premiers résultats
	
	Vous pouvez dès à présent consulter le monitoring : déployer l'ear et ouvrir la page suivante dans un navigateur web après avoir
	démarré le serveur :

	<<<http://<host>/<context>/monitoring>>>
	
	où <host> est le nom du serveur où l'application est déployée, suivi éventuellement du port (par exemple localhost:8080)
	et où <context> est le nom du contexte de la webapp que vous avez configuré dans l'ear.
	
	Vous pouvez ensuite compléter le paramétrage comme ci-dessous en fonction des besoins.

	** 4 à 17. Autres paramétrages (paramètres optionnels, JDBC, EJB3, Spring, etc)

	Pour compléter le paramétrage, suivez simplement les chapitres 4 à 17 du {{{./user_guide.html} guide d'utilisation}}.
	Puisque vous utilisez un fichier ear, vous pouvez être intéressé notamment par le chapitre "Façades métiers (fichier ejb-jar.xml si EJB3)".
	
	
* Mise en oeuvre optionnelle d'un serveur de centralisation

	Un serveur de collecte centralisé peut être mis en oeuvre optionnellement.
	Ce serveur permet de centraliser dans une même interface et avec un stockage unique
	le monitoring de plusieurs applications (recette et production par exemple)
	et / ou le monitoring d'une application avec plusieurs instances de serveurs (cluster par exemple).
	Ainsi les rapports, le stockage et les courbes sont déportées de l'application monitorée
	vers le serveur de collecte.

	Remarque: le serveur de collecte centralisé avec javamelody.war fonctionne seulement si le monitoring
	fonctionne dors et déjà avec javamelody.jar dans l'application cible à http://<host>:<port>/<context>/monitoring.
	Une application ne doit pas être monitorée depuis deux serveurs de collecte.

** 1. Fichier war de la webapp de monitoring

	Copier le fichier javamelody.war situé à la racine du fichier javamelody.zip fourni, vers le serveur centralisé.
	Le fichier javamelody.war doit correspondre en général à la même version du monitoring
	que le fichier javamelody.jar dans l'application monitorée.

** 2. Déploiement de la webapp de monitoring

	Note : Une alternative ne nécessitant pas de serveur d'application java est décrite dans le chapitre suivant.

	Déployer le fichier javamelody.war dans le serveur d'application Java du serveur centralisé.
	Si Tomcat, en écrivant un fichier xml de contexte nommé 'javamelody.xml' dans le répertoire
	conf/Catalina/localhost de Tomcat comme celui de l'exemple suivant :

+-------------------------------+
	<?xml version="1.0" encoding="UTF-8" ?>
	<Context docBase="<pathto>/javamelody.war" path="javamelody" reloadable="false" >
		<Parameter name='javamelody.resolution-seconds' value='120' override='false'/>
	</Context>
+-------------------------------+

	Les applications à monitorer seront ajoutées par la suite en accédant au serveur de collecte par un navigateur web.
	
	Des paramètres <<<resolution-seconds>>>, <<<storage-directory>>>, <<<system-actions-enabled>>>,
	<<<warning-threshold-millis>>>, <<<severe-threshold-millis>>> et <<<allowed-addr-pattern>>>
	optionnels peuvent être ajoutés dans le fichier de contexte xml du serveur de collecte
	en indiquant le préfixe <<<javamelody>>>. Ils peuvent aussi être ajoutés en tant que propriétés
	systèmes. Ils ont les mêmes effets sur le serveur de collecte
	que dans le cas du paramétrage du monitoring d'une application indiqué dans le {{{./user_guide.html} guide d'utilisation}}.
	En particulier le paramètre <<<resolution-seconds>>> définit la période d'appels des urls d'applications
	depuis le serveur de collecte et la résolution des courbes dans le monitoring.
	Le paramètre <<<system-actions-enabled>>> nécessite d'être ajouté avec la valeur "true" à la fois
	dans le serveur de collecte et dans les applications monitorées.

	Le serveur de collecte peut envoyer des rapports hebdomadaires, quotidiens ou mensuels par mail
	pour chaque application monitorée.
	Pour cela, utiliser dans le serveur de collecte (dans le contexte Tomcat par exemple)
	exactement la même session mail, les mêmes paramètres et les mêmes fichiers jars que ceux
	décrits dans le chapitre 'Rapports hebdomadaires, quotidiens ou mensuels par mail' du guide utilisateur.
	
	Si un format xml est souhaité à la place de la sérialisation java comme format de transport entre un serveur
	de collecte et les applications monitorées, il peut être ajouté un paramètre <<<transport-format>>> spécifique
	au serveur de collecte avec comme valeur xml. La sérialisation java est le format de transport par défaut et
	est recommandée pour de meilleures performances (75% plus performante en temps,
	selon ce {{{http://code.google.com/p/thrift-protobuf-compare/wiki/Benchmarking?ts=1237772203&updated=Benchmarking}benchmark}}).
	Le format de transport xml nécessite par contre une dépendance vers les librairies xstream (BSD) et xpp3 (Public Domain)
	dans les webapps monitorées.

** 3. Alternative plus simple de déploiement de la webapp de monitoring

	En alternative au déploiement ci-dessus de la webapp de monitoring dans un serveur d'application java,
	il est possible de lancer le moteur de servlet {{{http://winstone.sourceforge.net} winstone}} (LGPL) déjà inclus
	dans le fichier javamelody.war.
	Il suffit pour cela d'utiliser la commande "java -jar javamelody.war" en précisant en propriétés systèmes
	chacun des paramètres du monitoring détaillés ci-dessus.
	
	Exemples :
	
+-------------------------------+
	java -jar javamelody.war
	java -Djavamelody.resolution-seconds=120 -jar javamelody.war
+-------------------------------+
	
	Le paramétrage des ports http, du mode serveur, de la mémoire et des logs peut se faire comme ceci :
	
+-------------------------------+
	java -server -Xmx128m -jar javamelody.war --httpPort=8080 --ajp13Port=8009 2>&1 >>javamelody.log
+-------------------------------+
	
	D'autres paramètres pour le moteur de servlet sont possibles, pour les voir :

+-------------------------------+
	java -jar javamelody.war --usage
+-------------------------------+

	Sur Linux et Unix, il est possible de lancer ce serveur en démon (tâche de fond) avec des logs comme ceci
	({{{http://fr.wikipedia.org/wiki/Nohup} wikipedia}}) :

+-------------------------------+
	nohup java -server -jar javamelody.war 0</dev/null 2>&1 >>javamelody.log &
+-------------------------------+


** 4. Résultat avec un serveur de collecte
	
	Pour consulter le monitoring sur le serveur de collecte, ouvrir la page suivante dans un navigateur web après avoir
	démarré les serveurs :

	<<<http://<host>/javamelody/>>>

	où <host> est le nom du serveur de collecte, suivi éventuellement du port (par exemple localhost:8080)
	et où 'javamelody' est le nom du contexte de la webapp comme le nom du fichier 'javamelody.xml'.

	Des liens par application vous permettront de choisir l'application que vous souhaitez monitorer.
	
	
	Dans la page web, il est possible d'ajouter une application à monitorer en saisissant son nom et son url d'accès
	(par exemple "http://<host_recette>/myapp/" pour "recette" et "http://<host_production>/myapp/" pour "production").
	Si l'application est déployée sur plusieurs instances de serveurs (en cluster ou en ferme),
	il faut séparer les urls d'accès aux serveurs de l'application par une ','
	(par exemple "http://<host1>/myapp/,http://<host2>/myapp/" pour "cluster").
	Bien sûr, il est possible sinon d'ajouter chaque instance individuellement.
	
	En remarque, il n'est pas possible de monitorer plusieurs fois une même application,
	par exemple dans plusieurs serveurs de collecte ou deux fois dans un même serveur de collecte.
	
	Pour que le serveur de collecte puisse monitorer une application,
	il est nécessaire de mettre en oeuvre le monitoring dans cette application comme indiqué au début de ce chapitre.
	Lors de cette mise en oeuvre dans l'application, il n'est alors pas obligatoire d'inclure le fichier
	jrobin-*.jar dans le répertoire WEB-INF/lib de l'application, car seul le serveur de collecte gérera les courbes
	pour cette application.
	

** 5. Sécurité avec un serveur de collecte
	
	Toujours lors de cette mise en oeuvre dans l'application, il est possible de restreindre l'accès au monitoring
	de l'application au seul serveur de collecte selon son adresse ip, en interdisant ainsi l'accès au monitoring
	de l'application aux utilisateurs ou autres. Par exemple, si l'application monitorée est sur le même serveur
	que le serveur de collecte, l'ajout du paramètre suivant dans le fichier <<<web.xml>>> de l'application monitorée
	restreint l'accès et autorise seulement le serveur de collecte local :

+-------------------------------+
	<init-param>
		<param-name>allowed-addr-pattern</param-name>
		<param-value>127\.0\.0\.1</param-value>
	</init-param>
+-------------------------------+

	Si l'application monitorée est un serveur Hudson, Jenkins, JIRA, Confluence ou Bamboo, la propriété
	système <<<-Djavamelody.plugin-authentication-disabled=true>>> peut être ajoutée au serveur
	monitoré pour désactiver l'authentification de la page de monitoring dans le plugin javamelody
	et pour pouvoir ajouter le serveur dans un serveur de collecte.
	(Une propriété système comme <<<-Djavamelody.allowed-addr-pattern=127\.0\.0\.1>>> peut aussi
	être ajoutée avec l'adresse ip du serveur de collecte.)

	Au lieu d'utiliser <<<allowed-addr-pattern>>>, il est possible de sécuriser l'accès avec une authentification
	http basic (nom d'utilisateur et mot de passe) dans l'application monitorée.
	Pour cela, ajouter ce qui suit dans le fichier <<<web.xml>>> de l'application monitorée:
	
+-------------------------------+
        <login-config>
                <auth-method>BASIC</auth-method>
                <realm-name>Monitoring</realm-name>
        </login-config>
        <security-role>
                <role-name>monitoring</role-name>
        </security-role>
        <security-constraint>
                <web-resource-collection>
                        <web-resource-name>Monitoring</web-resource-name>
                        <url-pattern>/monitoring</url-pattern>
                </web-resource-collection>
                <auth-constraint>
                        <role-name>monitoring</role-name>
                </auth-constraint>
        </security-constraint>
+-------------------------------+

    Le royaume et l'utilisateur utilisés par le serveur de collecte doivent être définis dans le serveur d'application monitoré,
    et l'utilisateur doit avoir le rôle "monitoring" pour avoir accès.
	Par exemple, si tomcat est utilisé avec le royaume par défaut dans le serveur d'application monitoré,
	modifiez le contenu du fichier tomcat conf/tomcat-users.xml ainsi :

+-------------------------------+
        <?xml version='1.0' encoding='utf-8'?>
        <tomcat-users>
             <role rolename="monitoring"/>
             <user username="monitoring" password="monitoring" roles="monitoring"/>
        </tomcat-users>
+-------------------------------+

	Ensuite, quand l'application monitorée est ajoutée dans le serveur de collecte, il faut définir le nom d'utilisateur et le mot de passe dans l'URL.
	Par exemple, l'URL de l'application monitorée, telle que donnée au serveur de collecte, peut être :
	http://myusername:mypassword@myhost:8080/mywebapp
	
	Par ailleurs, si vous ne souhaitez pas que les personnes ayant accès au serveur de collecte puisse ajouter
	ou enlever des applications à monitorer, vous pouvez interdire l'écriture du fichier
	"applications.properties" listant les applications à monitorer. Ce fichier est situé dans le
	répertoire de stockage, par exemple "temp/javamelody/applications.properties".
	L'utilisateur de l'OS lançant la commande java du serveur de collecte doit être autorisé à lire
	ce fichier mais sans pouvoir l'écrire. Vous seul, en utilisant "root" par exemple, pourrez alors
	ajouter ou enlever des applications en éditant le fichier comme le ferait le serveur de collecte.
	Et dans ce cas, les liens "ajouter une application" et "enlever une application" n'apparaîtront
	pas dans le serveur de collecte.
	

* Façades métiers (sans EJB3 ni Spring ni Guice)

	Si l'application à monitorer contient des façades métiers avec des interfaces Java,
	un compteur peut être créé pour les statistiques d'exécution de méthodes sur ces façades même si ces interfaces ne sont ni EJB3 ni Spring.

	Tout d'abord si ces façades sont EJB3, Spring ou Guice, alors il est plus simple d'utiliser la configuration décrite dans le guide d'utilisation. 
	Sinon imaginons qu'une des façades métiers ait une interface avec une implémentation, laquelle est instanciée par exemple dans une factory
	comme ci-dessous :

+-------------------------------+
	public interface MaFacade { ...	}
	
	public class MaFacadeImpl implements MaFacade { ... }

	public class Factory {
		public static MaFacade createMaFacade() {
			final MaFacade maFacade = new MaFacadeImpl();
			return maFacade;
		}
	}
+-------------------------------+

	Il s'agit donc d'une interface Java standard (c'est-à-dire POJI ou Plain Old Java Interface).
	Il suffit alors simplement de modifier le code l'instanciation ainsi :

+-------------------------------+
	public class Factory {
		public static MaFacade createMaFacade() {
			final MaFacade maFacade = net.bull.javamelody.MonitoringProxy.createProxy(new MaFacadeImpl());
			return maFacade;
		}
	}
+-------------------------------+

	En pré-requis, il est donc nécessaire dans ce cas que le jar de javamelody soit disponible dans le classpath lors de la compilation
	et il est nécessaire d'avoir des interfaces pour les façades et pas seulement des implémentations.
	Si le nom affiché par le monitoring pour la classe ne vous convient pas, vous pouvez nommer
	le proxy ainsi :

+-------------------------------+
	public class Factory {
		public static MyFacade createMyFacade() {
			final MyFacade myFacade = net.bull.javamelody.MonitoringProxy.createProxy(new MyFacadeImpl(), "my business use case");
			return myFacade;
		}
	}
+-------------------------------+


* Alternative pour le monitoring des requêtes sql

	Si pour une raison quelconque il ne vous est pas possible de monitorer les requêtes sql avec une
	datasource jdbc ou avec un driver jdbc comme indiqué dans le chapitre JDBC du guide utilisateur,
	et si vous utilisez Hibernate alors il y a une alternative pour le monitoring des requêtes sql :
	définissez la propriété Hibernate "hibernate.jdbc.factory_class" avec la valeur
	"net.bull.javamelody.HibernateBatcherFactory".
	Cela activera l'affichage des statistiques des requêtes sql et l'affichage des connexions jdbc
	actives.
	
	Par exemple, si vous utilisez un fichier "hibernate.cfg.xml", ajoutez la ligne suivante avec
	les autres propriétés Hibernate:
	
+-------------------------------+
	<property name="hibernate.jdbc.factory_class">net.bull.javamelody.HibernateBatcherFactory</property>
+-------------------------------+


* Utilisation de JavaMelody dans JBoss AS 7 (qui utilise OSGI)

	JBoss AS 7 utilise OSGI et il est nécessaire d'ajouter une configuration dans JBoss pour utiliser JavaMelody.
	
	Ajouter com/sun/management to jboss-as-7/modules/sun/jdk/main/modules.xml:
	
+-------------------------------+
    ...
    <module xmlns="urn:jboss:module:1.1" name="sun.jdk">
        <resources>
            <!-- currently jboss modules has not way of importing services from
            classes.jar so we duplicate them here -->
            <resource-root path="service-loader-resources"/>
        </resources>
        <dependencies>
            <system export="true">
                <paths>
                    <path name="com/sun/management"/>
                    <path name="com/sun/script/javascript"/>
    ...
+-------------------------------+
	
	Sinon il y aura une erreur java.lang.NoClassDefFoundError: com/sun/management/OperatingSystemMXBean


* Utilisation de JavaMelody dans JonAS 5 (qui utilise OSGI)

	JonAS 5 utilise OSGI et il est nécessaire d'ajouter une configuration de felix dans JonAS pour utiliser JavaMelody.
	
	Copier le contenu du dernier {{{http://websvn.ow2.org/filedetails.php?repname=jonas&path=%2Fjonas%2Fbranches%2Fjonas_5_1%2Fjonas%2Fmodules%2Ftools%2Flaunchers%2Ffelix-launcher%2Fsrc%2Fmain%2Fresources%2Forg%2Fow2%2Fjonas%2Flauncher%2Ffelix%2Fdefault-config.properties}
	felix-config.properties}} pour JonAS dans un fichier nommé "felix-config.properties" et écrit dans le répertoire "conf" de votre serveur JonAS.
	Si le contenu de ce dernier fichier ne convient pas pour votre version de JonAS, vous pouvez trouver le fichier "felix-config.properties" adapté à votre version dans le fichier jar felix de votre serveur.
	
	Dans votre fichier "felix-config.properties", ajouter les packages systèmes suivants après la déclaration existante "org.osgi.framework.system.packages" :
	"com.sun.management" et "sun.nio.ch".
	
	Par exemple:
	
+-------------------------------+
org.osgi.framework.system.packages com.sun.management; \
				   sun.nio.ch; \
				   org.osgi.framework; version=1.5.0, \
+-------------------------------+
	
	Puis ajouter une propriété système dans votre fichier de lancement : -Djonas.felix.configuration.file=$JONAS_BASE/conf/felix-config.properties


* Déploiement de JavaMelody sur Tomcat sans modification des webapps monitorées (bêta)

	Si il y a une ou plusieurs webapp(s) à monitorer qui sont déployées sur Tomcat 6,
	il est possible de monitorer cette ou ces webapp(s) sans modification de cette ou ces webapp(s).
	C'est-à-dire sans modifier le fichier war ou le répertoire de ces webapps.
	
	Pour cela, copier les fichiers <<<javamelody.jar>>> et <<<jrobin-x.jar>>> et éventuellement <<<itext-x.jar>>> dans le répertoire lib de Tomcat 6 (et non dans les répertoires WEB-INF/lib des webapps).
	
	Puis ajouter les lignes suivantes dans le fichier web.xml du répertoire conf de Tomcat (et non dans les fichiers WEB-INF/web.xml des webapps).
	
+-------------------------------+
	<filter>
		<filter-name>monitoring</filter-name>
		<filter-class>net.bull.javamelody.MonitoringFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>monitoring</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<listener>
		<listener-class>net.bull.javamelody.SessionListener</listener-class>
	</listener>
+-------------------------------+

	Dans ce fichier conf/web.xml de tomcat, il peut aussi être ajouté des paramètres comme indiqué dans le guide d'utilisation.
	
	Ainsi et sans modification des webapps, toutes les webapps déployées dans cette instance de Tomcat seront monitorées
	(et il n'est alors pas possible de choisir lesquelles, autrement que par le paramètre url-exclude-pattern décrit dans le guide d'utilisation).
	Cette technique est spécifique à Tomcat 6 et ne s'applique pas aux autres implémentations JavaEE.

	Le <<<ClassLoader>>> dans les serveurs d'applications est un sujet complexe. En conséquences :
	
	* Cette fonctionnalité est pour l'instant considérée en phase bêta
	
	* Elle fonctionne uniquement en Tomcat 6 ou 7 (Tomcat 5.5 n'est donc pas supporté)
	
	* Le redéploiement à chaud n'est pas supporté avec cette technique
	
	* Il ne paraît pas conseillé d'utiliser le monitoring par Spring AOP dans ce cas

* Logs de débogage
	
	Des logs pour déboguer sont disponibles en utilisant soit logback si il est présent,
	soit log4j si il est présent ou java.util.logging sinon. Les messages de logs pour le débogage
	sont écrits en utilisant la catégorie "net.bull.javamelody" et le niveau "debug".
	
	De plus, les stack-traces des exceptions inhabituelles sont écrits dans les logs en utilisant
	logback ou log4j ou java.util.logging, dans la même catégorie et avec le niveau "info" ou "warn".
	
	Si la librairie logback est présente dans la webapp monitorée, il est possible d'afficher
	les logs de débogage en ajoutant ou en modifiant le fichier "logback.xml" dans le répertoire
	"WEB-INF/classes" de la webapp. Par exemple:
	
+-------------------------------+
	<?xml version="1.0" encoding="UTF-8" ?>
	<configuration>
		<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
			<encoder>
				<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n
				</pattern>
			</encoder>
		</appender>
	
		<!-- http requests log -->
		<logger name="javamelody">
			<level value="info" />
		</logger>
		
		<!-- debugging log -->
		<logger name="net.bull.javamelody">
			<level value="debug" />
		</logger>
	
		<root level="debug">
			<appender-ref ref="STDOUT" />
		</root>
	</configuration>
+-------------------------------+
	
	Si la librairie log4j est présente dans la webapp monitorée, il est possible d'afficher
	les logs de débogage en ajoutant ou en modifiant le fichier "log4j.xml" dans le répertoire
	"WEB-INF/classes" de la webapp. Par exemple:
	
+-------------------------------+
	<?xml version="1.0" encoding="UTF-8"?>
	<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
	<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/" debug="false">
		<appender name="CONSOLE" class="org.apache.log4j.ConsoleAppender">
			<param name="Threshold" value="DEBUG" />
			<layout class="org.apache.log4j.PatternLayout">
				<param name="ConversionPattern" value="%d{ABSOLUTE} %-5p [%c] %m%n" />
			</layout>
		</appender>
	
		<!-- log des requetes http  -->
		<category name="javamelody">
			<priority value="info" />
		</category>
		
		<!-- log de debogage -->
		<category name="net.bull.javamelody">
			<priority value="debug" />
		</category>
		
		<root>
			<appender-ref ref="CONSOLE" />
		</root>
	</log4j:configuration>
+-------------------------------+
	
	Un exemple des logs est le suivant:
	
+-------------------------------+
11:11:00.120 [main] DEBUG net.bull.javamelody - JavaMelody listener init started
11:11:00.151 [main] DEBUG net.bull.javamelody - datasources found in JNDI: [java:comp/env/jdbc/TestDB2, java:comp/env/jdbc/TestDB]
11:11:00.167 [main] DEBUG net.bull.javamelody - datasource rebinded: java:comp/env/jdbc/TestDB2 from class org.apache.tomcat.dbcp.dbcp.BasicDataSource to class $Proxy0
11:11:00.167 [main] DEBUG net.bull.javamelody - datasource rebinded: java:comp/env/jdbc/TestDB from class org.apache.tomcat.dbcp.dbcp.BasicDataSource to class $Proxy0
11:11:00.167 [main] DEBUG net.bull.javamelody - JavaMelody listener init done
11:11:00.182 [main] DEBUG net.bull.javamelody - JavaMelody filter init started
11:11:00.182 [main] DEBUG net.bull.javamelody - OS: Windows XP Service Pack 3, x86/32
11:11:00.182 [main] DEBUG net.bull.javamelody - Java: Java(TM) SE Runtime Environment, 1.6.0_21-b06
11:11:00.182 [main] DEBUG net.bull.javamelody - Server: Apache Tomcat/6.0.26
11:11:00.182 [main] DEBUG net.bull.javamelody - Webapp context: /test
11:11:00.182 [main] DEBUG net.bull.javamelody - JavaMelody version: 1.19.0-SNAPSHOT
11:11:00.182 [main] DEBUG net.bull.javamelody - Host: xxx@xxx
11:11:00.182 [main] DEBUG net.bull.javamelody - parameter defined: resolution-seconds=60
11:11:00.182 [main] DEBUG net.bull.javamelody - parameter defined: log=true
11:11:00.182 [main] DEBUG net.bull.javamelody - parameter defined: system-actions-enabled=true
11:11:00.182 [main] DEBUG net.bull.javamelody - parameter defined: mail-session=mail/Session
11:11:00.182 [main] DEBUG net.bull.javamelody - parameter defined: admin-emails=xxx
11:11:00.182 [main] DEBUG net.bull.javamelody - parameter defined: mail-periods=day,week,month
11:11:00.292 [main] DEBUG net.bull.javamelody - log listeners initialized
11:11:00.307 [main] DEBUG net.bull.javamelody - datasources found in JNDI: [java:comp/env/jdbc/TestDB2, java:comp/env/jdbc/TestDB]
11:11:00,386 INFO  [org.quartz.simpl.SimpleThreadPool] Job execution threads will use class loader of thread: main
11:11:00,432 INFO  [org.quartz.core.QuartzScheduler] Quartz Scheduler v.1.5.2 created.
11:11:00,432 INFO  [org.quartz.simpl.RAMJobStore] RAMJobStore initialized.
11:11:00,432 INFO  [org.quartz.impl.StdSchedulerFactory] Quartz scheduler 'DefaultQuartzScheduler' initialized from default resource file in Quartz package: 'quartz.properties'
11:11:00,432 INFO  [org.quartz.impl.StdSchedulerFactory] Quartz scheduler version: 1.5.2
11:11:00.432 [main] DEBUG net.bull.javamelody - job global listener initialized
11:11:00.432 [main] DEBUG net.bull.javamelody - counters initialized
11:11:00.495 [main] DEBUG net.bull.javamelody - counters data read from files in xxx\apache-tomcat-6.0.26\temp\javamelody\test_xxx
11:11:00.511 [main] DEBUG net.bull.javamelody - collect task scheduled every 60s
11:11:00.776 [main] DEBUG net.bull.javamelody - first collect of data done
11:11:00.792 [main] DEBUG net.bull.javamelody - mail report for the day period scheduled with next execution date at Wed Aug 18 00:00:00 CEST 2010
11:11:00.792 [main] DEBUG net.bull.javamelody - mail report for the week period scheduled with next execution date at Sun Aug 22 00:00:00 CEST 2010
11:11:00.792 [main] DEBUG net.bull.javamelody - mail report for the month period scheduled with next execution date at Wed Sep 01 00:00:00 CEST 2010
11:11:00.792 [main] DEBUG net.bull.javamelody - mail reports scheduled for xxx
11:11:00.792 [main] DEBUG net.bull.javamelody - JavaMelody filter init done
+-------------------------------+
	
* Réinitialisation de toutes les statistiques et de toutes les courbes
	
	Les fichiers de sauvegarde des statistiques et des courbes sont stockés dans le répertoire temporaire du serveur,
	à moins que vous n'ayez défini le paramètre "storage-directory". Et il y a un sous répertoire pour chaque application.
	
	Par exemple, avec tomcat c'est le répertoire <<< <TOMCAT_HOME>/temp/javamelody/ >>>.
	Avec certains autres serveurs sous linux, c'est le répertoire <<< /tmp/javamelody/>>>.
	Et pour le plugin Hudson / Jenkins, c'est le répertoire <<< <HUDSON_HOME>/javamelody/ >>>.
	
	Pour réinitialiser toutes les statistiques et toutes les courbes :
	
	* Arrêter le serveur
	
	* Supprimer le répertoire de stockage : javamelody dans le répertoire temporaire du serveur
	
	* Redémarrer le serveur. Vous pouvez ensuite ouvrir le rapport du monitoring qui est désormais vide.
	
	[]
	
	Mais pour réinitialiser seulement les statistiques, supprimer les fichiers *.gz dans les sous-répertoires du répertoire de stockage.
	Et pour réinitialiser seulement les courbes, supprimer les fichiers *.rrd dans les sous-répertoires du répertoire de stockage.

* Personnalisation des styles, icônes et autres ressources dans les rapports html
	
	Il peut être utile de personnaliser les styles, icônes, effets et les fichiers javascript ou d'aide dans les rapports html (rapports pdf exclus).
	Les rapports peuvent être adaptés aux styles d'une application d'entreprise avec le fichier CSS.
	Par exemple, ajouter ce qui suit, avant le filtre de monitoring, dans le fichier web.xml de votre webapp, pour utiliser vos propres CSS ou icônes: 

+-------------------------------+
 <filter>
	<filter-name>customResourceFilter</filter-name>
	<filter-class>net.bull.javamelody.CustomResourceFilter</filter-class>
	<init-param>
		<param-name>monitoring.css</param-name>
		<param-value>/customMonitoring.css</param-value>
	</init-param>
	<init-param>
		<param-name>bullets/green.png</param-name>
		<param-value>/static/bullets/red.png</param-value>
	</init-param>
 </filter>
 <filter-mapping>
	<filter-name>customResourceFilter</filter-name>
	<url-pattern>/monitoring</url-pattern>
 </filter-mapping>
+-------------------------------+

	Puis ajouter les fichiers "customMonitoring.css" et "static/bullets/red.png" à la racine du contenu web de la webapp.
	Il est possible de remplacer toutes les ressources web dans ce répertoire et ses sous-répertoires: "src/main/resources/net/bull/javamelody/resource".

* Rapport écrit avant le dernier arrêt
	
	Quelquefois un serveur est arrêté en urgence ou quand il y a un souci avec la mémoire utilisée.
	Et peut-être, n'avez vous pas pensé à enregistrer le rapport de JavaMelody pour avoir des chiffres
	précis sur l'état du serveur à ce moment. Mais pas d'inquiétude, quand l'application est arrêtée,
	JavaMelody écrit un fichier appelé <<<last_shutdown.html>>> dans le même répertoire de stockage
	comme expliqué dans le chapitre précédent. C'est le rapport de JavaMelody en format html, et
	il contient les statistiques pour le jour courant et les informations systèmes (comme la mémoire
	utilisée) pour l'heure courante juste avant que l'application ne soit arrêtée, mais il ne
	contient pas les graphiques.
	
* Format des fichiers RRD
	
	Les valeurs des courbes sont stockées au format RRD (Round Robin Database).
	De nombreux outils existent pour ce format dont {{{http://oss.oetiker.ch/rrdtool/}RRDtool}},
	proche parent de {{{http://oss.oetiker.ch/mrtg/}MRTG}}, ou {{{http://www.jrobin.org/}JRobin}} en Java.

* Compilation et développement

	{{{./dev_guide.html} Guide du dévelopeur}}
	