	-----
	Compilation et développement de Java Melody : monitoring d'applications Java EE
	-----
	Auteur : Emeric Vernat (evernat@free.fr)
	-----
	2009-01-01
	-----

~~ http://maven.apache.org/doxia/references/apt-format.html

Compilation et développement de Java Melody : monitoring d'applications Java EE

	({{{dev_guide_en.html} English }}, {{{user_guide.html} Guide d'utilisation }})

* Reconstruire à partir des sources

	Le fichier zip dans la partie "Download" contient les sources java avec un script {{{http://ant.apache.org}ant}} build.xml
	et un fichier pom.xml pour {{{http://maven.apache.org}maven}}
	ainsi que la javadoc, le projet eclipse, les fichiers jars.
	Si vous souhaitez recompiler la version en cours de développement et non une version livrée, il vous faire un checkout anonyme depuis 
	http://javamelody.googlecode.com/svn/trunk/javamelody-core/ (avec Eclipse ou bien {{{http://tortoisesvn.tigris.org/}TortoiseSVN}} si Windows)

	Après décompression du fichier zip ou après le checkout, vous pouvez utiliser le target "all" du script ant
	(sans maven) pour recompiler à partir des sources et produire les fichiers javamelody.jar, jira-javamelody.jar et
	javamelody.war qui sont ceux également disponibles dans la partie "Download". Vous devez
	définir la variable d'environnement JAVA_HOME avec le chemin d'un JDK v1.6 pour compiler les
	sources. Par exemple :
	
+-------------------------------+
	<path_to_ant>/bin/ant -f <path_to_javamelody>/build.xml all
+-------------------------------+
	
	Vous pouvez aussi utiliser les goals maven "clean site" pour produire un site maven contenant des documentations
	et des rapports sur l'analyse du code ou les tests unitaires (checkstyle, findbugs, pmd, cpd, junit, cobertura).


* Importer dans Eclipse les sources de la version en cours de développement

	Pour importer depuis le serveur SVN les sources de la version en cours de développement, avec Eclipse 3.6 utilisant un JDK 1.6 et le plugin SVN (le plugin maven m2eclipse est également conseillé pour simplifier ces étapes):
	
	* Lancer la tâche Import dans le menu File
	
	* Choisir SVN, Project from SVN
	
	* Pour créer un repository SVN, saisir l'URL http://javamelody.googlecode.com/svn/trunk/javamelody-core (pas d'authentification) puis cliquer Next
	
	* Choisir la resource d'URL http://javamelody.googlecode.com/svn/trunk/javamelody-core (cela peut nécessiter de la resélectionner dans la liste déroulante)
	
	* Cliquer Finish
	
	* Eclipse importe le projet javamelody-core avec les sources, puis compile le tout
	(maven doit fonctionner et être connecté pour télécharger les dépendances,
	sinon les ajouter à la main dans le Build-Path à partir de src/main/lib et src/test/test-webapp/WEB-INF/lib)
	
	* Il est possible également d'importer les projets javamelody-test-webapp et javamelody-collector-server situés à côté de javamelody-core dans SVN

	[]


	Pour reconstruire le jar et le war de JavaMelody :
	
	* Faire un clique-droit sur le fichier build.xml dans le projet javamelody-core, puis sélectionner Run As, Ant Build
	ce qui lancera la tâche par défaut "all" du script ant. (En remarque, la tâche "test" dans ce même script lance les tests unitaires.)
	
	* Attendre environ 20 secondes la fin de l'exécution du script
	
	* Faire un Refresh (F5) sur le projet javamelody-core
	
	* Dans l'arborescence du projet, il apparait le fichier javamelody.zip, contenant les jars et le war recompilés de javamelody

	[]

	
	Après quelques semaines par exemple, pour mettre à jour vos sources avec les nouveaux développements :
	
	* Faire un clique-droit sur le projet javamelody-core, puis sélectionner Team, Update
	
	[]	

	
* Développement

	Le développement se fait avec {{{http://www.eclipse.org}Eclipse}} dans sa dernière version et avec le jdk 1.6 au minimum pour la compilation.
	
	Le gestionnaire de sources est Subversion accessible par
	
	{{{http://javamelody.googlecode.com/svn/trunk/}http://javamelody.googlecode.com/svn/trunk/}}

	Le charset des fichiers est UTF-8. La configuration d'Eclipse est fournie dans
	les sources avec la configuration du formatage de code, du clean-up, des
	warnings et des plugins checkstyle, pmd, findbugs et lint4j.
	Le plugin eclipse infinitest est également recommandé.

	Les langages officiels du projet sont le français pour la javadoc mais l'anglais pour les termes techniques.
	(Cela donne une séparation claire entre le vocabulaire fonctionnel et le vocabulaire technique,
	puisque vous parlez français bien sûr).
    